# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
#  release:
#    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 16
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        server-id: 'github' # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        cache: 'maven'

#     - name: Cache Repo
#       # https://github.com/marketplace/actions/cache?version=v1.1.2
#       uses: actions/cache@v1
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      env:
        # GITHUB_REPOSITORY: The owner and repository name. For example, octocat/Hello-World.
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        REPO="github::default::https://maven.pkg.github.com/${GITHUB_REPOSITORY}"
        cat "${GITHUB_WORKSPACE}/settings.xml"
        echo "r: ${REPO}"
        echo "ae: ${GITHUB_ACTOR}"
        echo "te: ${GITHUB_TOKEN}"
        #echo "a: ${env.GITHUB_ACTOR}"
        #echo "t: ${env.GITHUB_TOKEN}"
        mvn -Dmaven.test.skip -DaltDeploymentRepository="${REPO}" -DaltReleaseDeploymentRepository="${REPO}" -DaltSnapshotDeploymentRepository="${REPO}" -e -X -s "${GITHUB_WORKSPACE}/settings.xml" -B deploy
